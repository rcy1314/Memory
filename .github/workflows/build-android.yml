name: Build Android App

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
          
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android
          
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './web/src-tauri -> target'
          
      - name: Install Android NDK and tools
        run: |
          echo "Installing Android SDK components..."
          sdkmanager --update
          sdkmanager "platform-tools" "build-tools;34.0.0" "platforms;android-34"
          sdkmanager "ndk;25.2.9519653"
          echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "Android SDK components installed successfully"
          echo "Verifying installations:"
          ls -la $ANDROID_SDK_ROOT/
          ls -la $ANDROID_SDK_ROOT/ndk/
          
      - name: Install frontend dependencies
        working-directory: ./web
        run: npm ci
        
      - name: Prepare Android environment
        working-directory: ./web
        run: |
          # Copy Android-specific environment for build
          cp .env.android .env.production
          
      - name: Build frontend
        working-directory: ./web
        run: npm run build
          
      - name: Install Tauri CLI
        run: |
          cargo install tauri-cli --version "2.7.1" --locked
          echo "Tauri CLI installed successfully"
          cargo tauri --version
        
      - name: Prepare Android Tauri config
        working-directory: ./web
        run: |
          # Backup original config and use Android-specific config
          cp src-tauri/tauri.conf.json src-tauri/tauri.conf.json.backup
          cp src-tauri/tauri.conf.android.json src-tauri/tauri.conf.json
          echo "Using Android-specific Tauri configuration"
          
      - name: Add Android targets
        run: |
          echo "=== Adding Android Rust targets ==="
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add i686-linux-android
          rustup target add x86_64-linux-android
          echo "Installed Android targets:"
          rustup target list | grep android
          
      - name: Verify Android SDK setup
        run: |
          echo "=== Verifying Android SDK Setup ==="
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
          echo "JAVA_HOME: $JAVA_HOME"
          
          # Check if required directories exist
          if [ ! -d "$ANDROID_HOME" ]; then
            echo "ERROR: ANDROID_HOME directory does not exist: $ANDROID_HOME"
            exit 1
          fi
          
          if [ ! -d "$ANDROID_NDK_ROOT" ]; then
            echo "ERROR: ANDROID_NDK_ROOT directory does not exist: $ANDROID_NDK_ROOT"
            exit 1
          fi
          
          # Check for essential tools
          if [ ! -f "$ANDROID_HOME/platform-tools/adb" ]; then
            echo "WARNING: adb not found in platform-tools"
          fi
          
          # Install required Android components
          echo "Installing required Android SDK components..."
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || echo "License acceptance failed"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.0" || echo "SDK component installation failed"
          
          echo "Android SDK verification completed"
          
      - name: Clean previous Android build
        working-directory: ./web
        run: |
          echo "=== Cleaning previous Android build ==="
          rm -rf src-tauri/gen/android || echo "No previous Android build to clean"
          rm -rf src-tauri/target/android || echo "No previous Android target to clean"
          echo "Cleanup completed"
          
      - name: Initialize Tauri Android project
        working-directory: ./web
        run: |
          echo "=== Tauri Android Initialization Debug ==="
          echo "Current working directory: $(pwd)"
          echo "Tauri CLI version:"
          cargo tauri --version
          echo "Available Tauri commands:"
          cargo tauri --help | head -30
          echo "Checking if Android command is available:"
          cargo tauri android --help || echo "Android command not available in Tauri CLI"
          echo "Checking Android environment variables:"
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "PATH: $PATH"
          echo "Checking if Android SDK tools exist:"
          ls -la $ANDROID_HOME/cmdline-tools/ || echo "cmdline-tools not found"
          ls -la $ANDROID_HOME/platform-tools/ || echo "platform-tools not found"
          echo "Checking src-tauri directory:"
          ls -la src-tauri/
          echo "Checking Tauri config:"
          cat src-tauri/tauri.conf.json
          echo "Checking Cargo.toml:"
          cat src-tauri/Cargo.toml
          echo "Checking Android targets:"
          rustup target list | grep android
          echo "Initializing Tauri Android project..."
          export RUST_LOG=debug
          cargo tauri android init --verbose 2>&1
          INIT_EXIT_CODE=$?
          if [ $INIT_EXIT_CODE -ne 0 ]; then
            echo "=== Android initialization failed ==="
            echo "Exit code: $INIT_EXIT_CODE"
            echo "Possible causes:"
            echo "1. Tauri CLI version doesn't support Android"
            echo "2. Missing Android SDK components"
            echo "3. Incorrect Android environment setup"
            echo "4. Missing mobile feature in Cargo.toml"
            echo "Checking for any generated files:"
            find src-tauri -name "*.android*" -o -name "gen" -type d 2>/dev/null || echo "No android-related files found"
            echo "Checking Rust toolchain:"
            rustup show
            echo "Checking Android SDK installation:"
            ls -la $ANDROID_HOME/ || echo "Android SDK not found"
            echo "Checking cmdline-tools:"
            find $ANDROID_HOME -name "sdkmanager" 2>/dev/null || echo "sdkmanager not found"
            echo "Checking if Tauri supports mobile:"
            cargo tauri --help | grep -i mobile || echo "Mobile support not found in Tauri CLI"
            exit 1
          fi
          echo "Android project initialization completed successfully"
          echo "Verifying generated directories:"
          ls -la src-tauri/gen/ || echo "gen directory not found"
          ls -la src-tauri/gen/android/ || echo "android directory not found"
          echo "Android project structure:"
          find src-tauri/gen/android -type d 2>/dev/null || echo "No android directories found"
          
      - name: Build Android APK (ARM64)
        working-directory: ./web
        run: |
          echo "=== Building Android APK for ARM64 ==="
          echo "Verifying Android project exists:"
          if [ ! -d "src-tauri/gen/android" ]; then
            echo "ERROR: Android project directory not found!"
            echo "This indicates that the Android initialization step failed."
            echo "Please check the previous 'Initialize Tauri Android project' step for errors."
            echo "Current directory structure:"
            find src-tauri -type d 2>/dev/null || echo "src-tauri not found"
            exit 1
          fi
          echo "Android project directory exists, proceeding with build..."
          cargo tauri android build --target aarch64
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
          
      - name: Build Android APK (ARMv7)
        working-directory: ./web
        run: |
          echo "=== Building Android APK for ARMv7 ==="
          if [ ! -d "src-tauri/gen/android" ]; then
            echo "ERROR: Android project directory not found!"
            exit 1
          fi
          cargo tauri android build --target armv7
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
          
      - name: Build Android APK (x86_64)
        working-directory: ./web
        run: |
          echo "=== Building Android APK for x86_64 ==="
          if [ ! -d "src-tauri/gen/android" ]; then
            echo "ERROR: Android project directory not found!"
            exit 1
          fi
          cargo tauri android build --target x86_64
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
          
      - name: Restore original Tauri config
        working-directory: ./web
        run: |
          # Restore original Tauri configuration
          cp src-tauri/tauri.conf.json.backup src-tauri/tauri.conf.json
          echo "Original Tauri configuration restored"
        if: always()
          
      - name: Upload Android APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            web/src-tauri/gen/android/app/build/outputs/apk/**/*.apk
          retention-days: 30
          
  release-android:
    needs: build-android
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: android-artifacts
          
      - name: Create Android Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            android-artifacts/**/*.apk
          draft: false
          prerelease: false
          generate_release_notes: true
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}