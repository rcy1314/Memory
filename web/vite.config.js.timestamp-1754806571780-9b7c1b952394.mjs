// vite.config.js
import { defineConfig, loadEnv } from "file:///Library/Github/Memory/web/node_modules/vite/dist/node/index.js";

// build/utils.js
import path from "path";
import dotenv from "file:///Library/Github/Memory/web/node_modules/dotenv/lib/main.js";
function getRootPath() {
  return path.resolve(process.cwd());
}
function getSrcPath(srcName = "src") {
  return path.resolve(getRootPath(), srcName);
}
function convertEnv(envOptions) {
  const result = {};
  if (!envOptions) return result;
  for (const envKey in envOptions) {
    let envVal = envOptions[envKey];
    if (["true", "false"].includes(envVal)) envVal = envVal === "true";
    if (["VITE_PORT"].includes(envKey)) envVal = +envVal;
    result[envKey] = envVal;
  }
  return result;
}

// build/config/define.js
import dayjs from "file:///Library/Github/Memory/web/node_modules/dayjs/dayjs.min.js";
var _BUILD_TIME_ = JSON.stringify(dayjs().format("YYYY-MM-DD HH:mm:ss"));
var viteDefine = {
  _BUILD_TIME_
};

// build/plugin/index.js
import vue from "file:///Library/Github/Memory/web/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import Unocss from "file:///Library/Github/Memory/web/node_modules/unocss/dist/vite.mjs";
import { visualizer } from "file:///Library/Github/Memory/web/node_modules/rollup-plugin-visualizer/dist/plugin/index.js";
import viteCompression from "file:///Library/Github/Memory/web/node_modules/vite-plugin-compression/dist/index.mjs";
import viteImagemin from "file:///Library/Github/Memory/web/node_modules/vite-plugin-imagemin/dist/index.mjs";

// build/plugin/html.js
import { createHtmlPlugin } from "file:///Library/Github/Memory/web/node_modules/vite-plugin-html/dist/index.mjs";
function configHtmlPlugin(viteEnv, isBuild) {
  const { VITE_TITLE } = viteEnv;
  const htmlPlugin = createHtmlPlugin({
    minify: isBuild,
    inject: {
      data: {
        title: VITE_TITLE
      }
    }
  });
  return htmlPlugin;
}

// build/plugin/unplugin.js
import { resolve } from "path";
import AutoImport from "file:///Library/Github/Memory/web/node_modules/unplugin-auto-import/dist/vite.js";
import Components from "file:///Library/Github/Memory/web/node_modules/unplugin-vue-components/dist/vite.mjs";
import { NaiveUiResolver } from "file:///Library/Github/Memory/web/node_modules/unplugin-vue-components/dist/resolvers.mjs";
import { FileSystemIconLoader } from "file:///Library/Github/Memory/web/node_modules/unplugin-icons/dist/loaders.mjs";
import IconsResolver from "file:///Library/Github/Memory/web/node_modules/unplugin-icons/dist/resolver.mjs";
import Icons from "file:///Library/Github/Memory/web/node_modules/unplugin-icons/dist/vite.mjs";
import { createSvgIconsPlugin } from "file:///Library/Github/Memory/web/node_modules/vite-plugin-svg-icons/dist/index.mjs";
var customIconPath = resolve(getSrcPath(), "assets/svg");
var unplugin_default = [
  AutoImport({
    imports: ["vue", "vue-router"],
    dts: false
  }),
  Icons({
    compiler: "vue3",
    customCollections: {
      custom: FileSystemIconLoader(customIconPath)
    },
    scale: 1,
    defaultClass: "inline-block"
  }),
  Components({
    resolvers: [
      NaiveUiResolver(),
      IconsResolver({ customCollections: ["custom"], componentPrefix: "icon" })
    ],
    dts: false
  }),
  createSvgIconsPlugin({
    iconDirs: [customIconPath],
    symbolId: "icon-custom-[dir]-[name]",
    inject: "body-last",
    customDomId: "__CUSTOM_SVG_ICON__"
  })
];

// build/plugin/index.js
function createVitePlugins(viteEnv, isBuild) {
  const plugins = [vue(), ...unplugin_default, configHtmlPlugin(viteEnv, isBuild), Unocss()];
  if (viteEnv.VITE_USE_COMPRESS) {
    plugins.push(viteCompression({ algorithm: viteEnv.VITE_COMPRESS_TYPE || "gzip" }));
  }
  if (isBuild) {
    plugins.push(
      visualizer({
        open: true,
        gzipSize: true,
        brotliSize: true
      }),
      // 图片压缩插件
      viteImagemin({
        gifsicle: { optimizationLevel: 7, interlaced: false },
        mozjpeg: { quality: 80 },
        pngquant: { quality: [0.65, 0.8], speed: 4 },
        webp: { quality: 75 }
      })
    );
  }
  return plugins;
}

// build/constant.js
var OUTPUT_DIR = "../dist";
var PROXY_CONFIG = {
  "/api/v1": {
    target: "http://127.0.0.1:9999",
    changeOrigin: true
  }
};

// vite.config.js
var vite_config_default = defineConfig(({ command, mode }) => {
  const srcPath = getSrcPath();
  const rootPath = getRootPath();
  const isBuild = command === "build";
  const env = loadEnv(mode, process.cwd());
  const viteEnv = convertEnv(env);
  const { VITE_PORT, VITE_PUBLIC_PATH, VITE_USE_PROXY, VITE_BASE_API } = viteEnv;
  return {
    base: VITE_PUBLIC_PATH || "/",
    resolve: {
      alias: {
        "~": rootPath,
        "@": srcPath
      }
    },
    define: viteDefine,
    plugins: createVitePlugins(viteEnv, isBuild),
    server: {
      host: "0.0.0.0",
      port: VITE_PORT,
      open: true,
      proxy: VITE_USE_PROXY ? {
        [VITE_BASE_API]: PROXY_CONFIG[VITE_BASE_API]
      } : void 0
    },
    css: {
      preprocessorOptions: {
        scss: {
          api: "modern-compiler"
          // 使用现代编译器API
        }
      }
    },
    build: {
      target: "es2015",
      outDir: OUTPUT_DIR || "dist",
      reportCompressedSize: false,
      // 启用/禁用 gzip 压缩大小报告
      chunkSizeWarningLimit: 1024
      // chunk 大小警告的限制（单位kb）
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
